const mongoose = require("mongoose");
const User = require("../models/user");
const bot = require("../bot");

class MarriageHandler {
  async marry(req, res) {
    try {
      let { user } = req;
      let { receiver } = req.body;

      if (!receiver) {
        return res
          .status(400)
          .json({ error: true, message: "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      let candidate = await User.findOne({ username: receiver });

      if (!candidate) {
        return res
          .status(400)
          .json({ error: true, message: "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (user.username == receiver.username) {
        return res.status(400).json({
          error: true,
          message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!",
        });
      }

      if (user.marriedWith || candidate.marriedWith) {
        return res
          .status(403)
          .json({ error: true, message: "–ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!" });
      }

      await bot.sendMessage(
        user.chatid,
        `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b>\n–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ –±—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏–∏ <a href = "${candidate.tgusername}">${candidate.username}</a>. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—É–ø–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç ${candidate.username}`,
        {
          parse_mode: "HTML",
        }
      );
      await bot.sendMessage(
        candidate.chatid,
        `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b>\n${user.username} —Å–¥–µ–ª–∞–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ!`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                  callback_data: `acceptMarriage ${user._id}`,
                },
                {
                  text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                  callback_data: `rejectMarriage ${user._id}`,
                },
              ],
            ],
          },
        }
      );

      return res.status(200).json({ error: false });
    } catch (err) {
      console.error(err);
      return res.status(50).json({
        error: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
      });
    }
  }

  async unmarry(req, res) {
    try {
      let { user } = req;

      if (user.marriedWith == "") {
        return res
          .status(400)
          .json({ error: true, message: "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±—Ä–∞–∫–µ!" });
      }

      let partner = await User.findById(user.marriedWith);

      if (!partner) {
        return res
          .status(400)
          .json({ error: true, message: "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω." });
      }

      user.marriedWith = "";
      partner.marriedWith = "";

      await user.save();
      await partner.save();

      await bot.sendMessage(
        user.chatid,
        `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b>\n–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É–ª–∏ –±—Ä–∞–∫ —Å <a href = "https://t.me/${partner.tgusername}">${partner.username}</a> üíî`,
        {
          parse_mode: "HTML",
        }
      );

      await bot.sendMessage(
        partner.chatid,
        `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b>\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <a href = "https://t.me/${user.tgusername}">${user.username}</a> —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É–ª –±—Ä–∞–∫ üíî`,
        {
          parse_mode: "HTML",
        }
      );

      return res
        .status(200)
        .json({ error: false, message: "–ë—Ä–∞–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç" });
    } catch (err) {
      console.error(err);
      res.status(500).json({
        error: true,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
      });
    }
  }

  async myMarriage(req, res) {
    try {
      const { user } = req;

      let partner = await User.findById(user.marriedWith);

      if (!partner) {
        return res
          .status(404)
          .json({ error: true, message: "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      return res.status(200).json({ error: false, partner });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: true });
    }
  }

  async marriages(req, res) {
    try {
      // Find all users with a non-empty marriedWith field
      const users = await User.find({ marriedWith: { $ne: "" } });

      // Prepare the response as an array of marriage objects
      const marriages = await Promise.all(
        users.map(async (user) => {
          try {
            const marriedWith = await User.findById(user.marriedWith);
            return {
              partner1: {
                id: user._id,
                avatarUrl: user.avatarUrl,
                username: user.username,
                tgusername: user.tgusername,
              },
              partner2: {
                id: marriedWith._id,
                avatarUrl: marriedWith.avatarUrl,
                username: marriedWith.username,
                tgusername: marriedWith.tgusername,
              },
            };
          } catch (error) {
            console.error(`Error fetching marriage details: ${error}`);
            // You might want to handle the error or return some default value
            return null;
          }
        })
      );

      const uniqueMarriages = [];

      const seenPairs = new Set();

      marriages.forEach((marriage) => {
        const sortedIds = [marriage.partner1.id, marriage.partner2.id].sort();
        const pair = sortedIds.join("_");
        if (!seenPairs.has(pair)) {
          uniqueMarriages.push(marriage);
          seenPairs.add(pair);
        }
      });

      // Send the JSON response
      res.status(200).json({ error: false, marriages: uniqueMarriages });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: true });
    }
  }
}

module.exports = MarriageHandler;
